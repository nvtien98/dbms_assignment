{"ast":null,"code":"import _defineProperty from \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ConversationContainer/ChatboxContainer/MessageGroup/Message/Message.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Popup } from 'semantic-ui-react';\nimport ContainerContext from './../../ContainerContext';\nimport { sendMessage } from './../../../../../_services/api.service';\nimport Socket from './../../../../../Socket';\nimport { connect } from 'react-redux';\nimport \"./Message.css\";\n\nclass Message extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: false\n    };\n  }\n\n  async componentDidMount() {\n    const _this$props = this.props,\n          content = _this$props.content,\n          is_new = _this$props.is_new,\n          user = _this$props.user,\n          conversation = _this$props.conversation;\n\n    if (is_new) {\n      try {\n        const _this$context = this.context,\n              roomID = _this$context.roomID,\n              roomMembers = _this$context.roomMembers;\n        const message = {\n          conversation_id: roomID,\n          user_id: conversation.user_id,\n          message_content: content\n        };\n        const fullName = user.firstname + ' ' + user.lastname;\n        await sendMessage(message);\n        setTimeout(() => {\n          Socket.emit(\"ROOM.CLIENT.SEND_MESSAGE\", _objectSpread({}, message, {\n            sendUser: user.user_id,\n            roomMembers: roomMembers,\n            sendTime: new Date().getTime(),\n            name: fullName\n          }));\n        }, 0);\n      } catch (e) {\n        this.setState({\n          error: true\n        });\n        console.log(\"Cannot send message\", e);\n      }\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          send_time = _this$props2.send_time,\n          content = _this$props2.content;\n    const error = this.state.error;\n    let className = '';\n\n    if (error) {\n      className = \"Message Message--Error\";\n    } else {\n      className = \"Message\";\n    }\n\n    const popUpContent = moment(new Date(send_time)).calendar().replace(/\\sat\\s/, ' ').replace('Today', '');\n    return React.createElement(\"div\", {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      content: popUpContent,\n      size: \"mini\",\n      position: \"right center\",\n      style: {\n        padding: \"0.75em\"\n      },\n      inverted: true,\n      trigger: React.createElement(\"div\", {\n        className: \"Message__Content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, content),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }));\n  }\n\n}\n\nMessage.contextType = ContainerContext;\nMessage.propTypes = {\n  content: PropTypes.string\n};\n\nfunction mapStateToProps(state) {\n  const user = state.authentication.user;\n  const conversation = state.conversation.conversation;\n  return {\n    user,\n    conversation\n  };\n}\n\nexport default connect(mapStateToProps, null)(Message);","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ConversationContainer/ChatboxContainer/MessageGroup/Message/Message.js"],"names":["React","Component","PropTypes","moment","Popup","ContainerContext","sendMessage","Socket","connect","Message","constructor","props","state","error","componentDidMount","content","is_new","user","conversation","context","roomID","roomMembers","message","conversation_id","user_id","message_content","fullName","firstname","lastname","setTimeout","emit","sendUser","sendTime","Date","getTime","name","e","setState","console","log","render","send_time","className","popUpContent","calendar","replace","padding","contextType","propTypes","string","mapStateToProps","authentication"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Popup } from 'semantic-ui-react';\nimport ContainerContext from './../../ContainerContext';\nimport { sendMessage } from './../../../../../_services/api.service';\n\nimport Socket from './../../../../../Socket';\n\nimport { connect } from 'react-redux';\n\nimport \"./Message.css\";\n\nclass Message extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\terror: false,\n\t\t}\n\t}\n\n\tstatic contextType = ContainerContext;\n\n\tasync componentDidMount() {\n\t\tconst { content, is_new, user, conversation } = this.props;\n\t\tif (is_new) {\n\t\t\ttry {\n\t\t\t\tconst { roomID, roomMembers } = this.context;\n\t\t\t\tconst message = {\n\t\t\t\t\tconversation_id: roomID,\n\t\t\t\t\tuser_id: conversation.user_id,\n\t\t\t\t\tmessage_content: content\n\t\t\t\t}\n\t\t\t\tconst fullName = user.firstname + ' ' + user.lastname;\n\t\t\t\tawait sendMessage(message);\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tSocket.emit(\"ROOM.CLIENT.SEND_MESSAGE\", { ...message, sendUser: user.user_id, roomMembers: roomMembers, sendTime: new Date().getTime(), name: fullName });\n\t\t\t\t}, 0)\n\n\t\t\t} catch (e) {\n\t\t\t\tthis.setState({ error: true });\n\t\t\t\tconsole.log(\"Cannot send message\", e);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { send_time, content } = this.props;\n\t\tconst { error } = this.state;\n\n\t\tlet className = '';\n\t\tif (error) {\n\t\t\tclassName = \"Message Message--Error\";\n\t\t} else {\n\t\t\tclassName = \"Message\"\n\t\t}\n\n\t\tconst popUpContent = moment(new Date(send_time)).calendar().replace(/\\sat\\s/, ' ').replace('Today', '');\n\n\t\treturn (\n\t\t\t<div className={className}>\n\t\t\t\t<Popup content={popUpContent} size=\"mini\" position=\"right center\" style={{ padding: \"0.75em\" }} inverted\n\t\t\t\t\ttrigger={<div className=\"Message__Content\">{content}</div>} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nMessage.propTypes = {\n\tcontent: PropTypes.string,\n}\n\nfunction mapStateToProps(state) {\n\tconst { user } = state.authentication;\n\tconst { conversation } = state.conversation;\n\treturn { user, conversation };\n}\n\nexport default connect(mapStateToProps, null)(Message);\n"]},"metadata":{},"sourceType":"module"}