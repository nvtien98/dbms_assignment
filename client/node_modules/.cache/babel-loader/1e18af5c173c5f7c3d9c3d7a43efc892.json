{"ast":null,"code":"import _defineProperty from \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ConversationContainer/ConversationContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport ContactInfo from './ContactInfo/ContactInfo';\nimport ChatboxContainer from './ChatboxContainer/ChatboxContainer';\nimport ConversationPlaceholder from './Placeholder';\nimport { getConversationInfor, getMessages } from './../../_services/api.service';\nimport { selectConversation } from './../../_actions/chat.actions';\nconst initialState = {\n  isLoading: false,\n  roomID: null,\n  roonName: 'Room Title',\n  roomMembers: [],\n  messages: []\n};\n\nclass ConversationContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    this.setState({\n      roomID: this.props.match.params.roomID\n    });\n    this.fetchRoomInfo();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.match.params.roomID !== prevProps.match.params.roomID) {\n      if (!this.props.match.params.roomID) {\n        this.setState(_objectSpread({}, initialState));\n      } else {\n        this.setState({\n          roomID: this.props.match.params.roomID,\n          roonName: this.props.conversation.name\n        });\n        this.fetchRoomInfo();\n      }\n    }\n  }\n\n  async fetchRoomInfo() {\n    const user_id = this.props.user.user_id;\n    const roomID = this.props.match.params.roomID;\n    if (!roomID) return;\n\n    try {\n      this.setState({\n        isLoading: true\n      });\n      const res = await getConversationInfor(roomID);\n      const data = res.data;\n\n      if (data === null) {\n        const partner_id = this.props.conversation.user_id;\n        this.setState({\n          roomMembers: [partner_id],\n          messages: []\n        });\n        return;\n      }\n\n      const members = data.members.filter(member => {\n        const match = user_id === member.user_id;\n        return !match;\n      });\n      const memberIDs = members.map(member => {\n        return member.user_id;\n      });\n      this.setState({\n        messages: data.messages,\n        roomMembers: memberIDs,\n        roonName: data.group_name\n      });\n    } catch (err) {\n      console.warn('Can not fetch information of room', err);\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  async fetchMessages() {\n    const roomID = this.props.match.params.roomID;\n\n    try {\n      this.setState({\n        isLoading: true\n      });\n      const res = await getMessages(roomID);\n      const data = res.data;\n      this.setState({\n        messages: data\n      });\n    } catch (err) {\n      console.warn('Can not fetch messages of room', err);\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          roomID = _this$state.roomID,\n          roomMembers = _this$state.roomMembers,\n          messages = _this$state.messages,\n          roonName = _this$state.roonName;\n    const _this$props = this.props,\n          updateLastMessage = _this$props.updateLastMessage,\n          conversation = _this$props.conversation;\n    let isGroup = false;\n    if (conversation) isGroup = conversation.is_group;\n    if (isLoading) return React.createElement(ConversationPlaceholder, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: \"MessageInfoContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(ContactInfo, {\n      header: roonName,\n      isGroup: isGroup,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(ChatboxContainer, {\n      roomID: roomID,\n      roomMembers: roomMembers,\n      messages: messages,\n      updateLastMessage: updateLastMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const user = state.authentication.user;\n  const conversation = state.conversation.conversation;\n  return {\n    user,\n    conversation\n  };\n}\n\nconst actionCreators = {\n  selectConversation: selectConversation\n};\nexport default withRouter(connect(mapStateToProps, actionCreators)(ConversationContainer));","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ConversationContainer/ConversationContainer.js"],"names":["React","Component","withRouter","connect","ContactInfo","ChatboxContainer","ConversationPlaceholder","getConversationInfor","getMessages","selectConversation","initialState","isLoading","roomID","roonName","roomMembers","messages","ConversationContainer","constructor","props","state","componentDidMount","setState","match","params","fetchRoomInfo","componentDidUpdate","prevProps","conversation","name","user_id","user","res","data","partner_id","members","filter","member","memberIDs","map","group_name","err","console","warn","fetchMessages","render","updateLastMessage","isGroup","is_group","mapStateToProps","authentication","actionCreators"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport ContactInfo from './ContactInfo/ContactInfo'\nimport ChatboxContainer from './ChatboxContainer/ChatboxContainer';\nimport ConversationPlaceholder from './Placeholder';\n\nimport { getConversationInfor, getMessages } from './../../_services/api.service';\n\nimport { selectConversation } from './../../_actions/chat.actions';\n\nconst initialState = {\n\tisLoading: false,\n\troomID: null,\n\troonName: 'Room Title',\n\troomMembers: [],\n\tmessages: [],\n}\n\nclass ConversationContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = initialState;\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({ roomID: this.props.match.params.roomID });\n\t\tthis.fetchRoomInfo();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.match.params.roomID !== prevProps.match.params.roomID) {\n\t\t\tif (!this.props.match.params.roomID) {\n\t\t\t\tthis.setState({ ...initialState });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.setState({\n\t\t\t\t\troomID: this.props.match.params.roomID,\n\t\t\t\t\troonName: this.props.conversation.name\n\t\t\t\t});\n\t\t\t\tthis.fetchRoomInfo();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync fetchRoomInfo() {\n\t\tconst user_id = this.props.user.user_id;\n\t\tconst { roomID } = this.props.match.params;\n\t\tif (!roomID) return;\n\t\ttry {\n\n\t\t\tthis.setState({ isLoading: true })\n\t\t\tconst res = await getConversationInfor(roomID);\n\t\t\tconst data = res.data;\n\n\t\t\tif (data === null) {\n\t\t\t\tconst partner_id = this.props.conversation.user_id;\n\t\t\t\tthis.setState({\n\t\t\t\t\troomMembers: [partner_id],\n\t\t\t\t\tmessages: [],\n\t\t\t\t})\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst members = data.members.filter(member => {\n\t\t\t\tconst match = user_id === member.user_id;\n\t\t\t\treturn !match;\n\t\t\t})\n\n\t\t\tconst memberIDs = members.map(member => {\n\t\t\t\treturn member.user_id;\n\t\t\t})\n\n\t\t\tthis.setState({\n\t\t\t\tmessages: data.messages,\n\t\t\t\troomMembers: memberIDs,\n\t\t\t\troonName: data.group_name\n\t\t\t});\n\n\t\t} catch (err) {\n\t\t\tconsole.warn('Can not fetch information of room', err);\n\t\t} finally {\n\t\t\tthis.setState({ isLoading: false })\n\t\t}\n\t}\n\n\tasync fetchMessages() {\n\t\tconst { roomID } = this.props.match.params;\n\t\ttry {\n\t\t\tthis.setState({ isLoading: true })\n\t\t\tconst res = await getMessages(roomID);\n\t\t\tconst data = res.data;\n\t\t\tthis.setState({ messages: data });\n\t\t} catch (err) {\n\t\t\tconsole.warn('Can not fetch messages of room', err);\n\t\t} finally {\n\t\t\tthis.setState({ isLoading: false })\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { isLoading, roomID, roomMembers, messages, roonName } = this.state\n\t\tconst { updateLastMessage, conversation } = this.props;\n\n\t\tlet isGroup = false;\n\t\tif (conversation) isGroup = conversation.is_group;\n\t\tif (isLoading) return <ConversationPlaceholder />;\n\t\treturn (\n\t\t\t<div className=\"MessageInfoContainer\">\n\t\t\t\t<ContactInfo header={roonName} isGroup={isGroup} />\n\t\t\t\t<ChatboxContainer roomID={roomID} roomMembers={roomMembers} messages={messages} updateLastMessage={updateLastMessage} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nfunction mapStateToProps(state) {\n\tconst { user } = state.authentication;\n\tconst { conversation } = state.conversation;\n\treturn { user, conversation };\n}\n\nconst actionCreators = {\n\tselectConversation: selectConversation\n}\n\nexport default withRouter(connect(mapStateToProps, actionCreators)(ConversationContainer));\n"]},"metadata":{},"sourceType":"module"}