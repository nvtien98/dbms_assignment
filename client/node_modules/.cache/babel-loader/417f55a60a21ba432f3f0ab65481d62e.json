{"ast":null,"code":"var _jsxFileName = \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ContactContainer/Contact/Contact.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Avatar from './../../Avatar/Avatar';\nimport { toHHMM } from \"../../../_utils/time\";\nimport { withRouterInnerRef } from '../../../hocs/withRouter';\nimport { connect } from 'react-redux';\nimport { selectConversation } from '../../../_actions/chat.actions';\nimport Socket from './../../../Socket';\nimport './Contact.css';\n\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onMessageReceive = message => {\n      const _this$props = this.props,\n            _id = _this$props._id,\n            conversation = _this$props.conversation;\n      const conversation_id = message.conversation_id,\n            send_user = message.send_user,\n            content = message.content,\n            send_time = message.send_time;\n      if (_id !== conversation_id) return;\n\n      if (conversation && _id !== conversation._id) {\n        console.log('onMessageReceive');\n        this.setState({\n          newMessage: true\n        });\n      }\n\n      this.setState({\n        lastMessage: {\n          send_user: send_user,\n          content: content,\n          send_time: send_time\n        }\n      });\n    };\n\n    this.update = message => {\n      this.setState({\n        lastMessage: message\n      });\n    };\n\n    this.handleSelectConversation = () => {\n      const _this$props2 = this.props,\n            _id = _this$props2._id,\n            name = _this$props2.name,\n            is_group = _this$props2.is_group,\n            lastMessageTime = _this$props2.lastMessageTime,\n            seenMembers = _this$props2.seenMembers,\n            lastMessage = _this$props2.lastMessage;\n\n      if (this.state.newMessage) {\n        this.setState({\n          newMessage: false\n        });\n        this.props.updateSeenStatus(_id);\n      }\n\n      this.props.selectConversation({\n        _id,\n        name,\n        is_group,\n        lastMessageTime,\n        seenMembers,\n        lastMessage\n      });\n    };\n\n    this.userNameForID = parnerID => {\n      let partnerName = ''; // this.props.users.map(user => {\n      //   if (user._id === parnerID) {\n      //     partnerName = user.lastname.concat(':');\n      //     return '';\n      //   }\n      //   return '';\n      // })\n      // console.log('partnerName', partnerName);\n\n      return partnerName;\n    };\n\n    this.state = {\n      newMessage: false,\n      lastMessage: props.lastMessage\n    };\n  }\n\n  componentDidMount() {\n    const _this$props3 = this.props,\n          user = _this$props3.user,\n          seenMembers = _this$props3.seenMembers;\n    const user_id = user.user_id;\n    this.setState({\n      newMessage: !seenMembers.includes(user_id)\n    });\n    Socket.on('ROOM.SERVER.SEND_MESSAGE', this.onMessageReceive);\n  }\n\n  componentWillUnmount() {}\n\n  componentDidUpdate(prevProps) {\n    if (this.roomMatch(this.props) && !this.roomMatch(prevProps)) {\n      this.setState({\n        newMessage: false\n      });\n    }\n  }\n\n  roomMatch(props) {\n    const id = props.id;\n    const isGroupChat = props.type;\n    const _nvtien = 'nvtien',\n          roomIdOrUsername = _nvtien.roomIdOrUsername;\n    const usernameMatch = !isGroupChat && 'nvtien' === roomIdOrUsername;\n    const idMatch = isGroupChat && id === roomIdOrUsername;\n    return usernameMatch || idMatch;\n  } // Update last message\n\n\n  render() {\n    const _this$state = this.state,\n          newMessage = _this$state.newMessage,\n          lastMessage = _this$state.lastMessage;\n    const _this$props4 = this.props,\n          user = _this$props4.user,\n          name = _this$props4.name,\n          _id = _this$props4._id,\n          is_group = _this$props4.is_group,\n          partner = _this$props4.partner; // const partnerName = this.userNameForID(lastMessage.send_user);\n\n    let className = 'ContactItemContainer__ContactItem';\n    if (newMessage) className = className + ' ContactItemContainer__ContactItem--NewMessage';\n    return React.createElement(Link, {\n      to: \"/\".concat(_id),\n      onClick: this.handleSelectConversation,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(Avatar, {\n      userID: is_group ? null : partner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"ContactItemContainer__ContactItem__Content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"Fullname\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, name), lastMessage && React.createElement(\"div\", {\n      className: \"ContactItemContainer__ContactItem__Content__LastMessage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, user.user_id === lastMessage.send_user && \"You:\", \"\\xA0\", lastMessage.content)), lastMessage && React.createElement(\"div\", {\n      className: \"ContactItemContainer__ContactItem__Time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, toHHMM(new Date(lastMessage.send_time)))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const user = state.authentication.user;\n  const conversation = state.conversation.conversation;\n  return {\n    user,\n    conversation\n  };\n}\n\nconst actionCreators = {\n  selectConversation: selectConversation\n};\nexport default withRouterInnerRef(connect(mapStateToProps, actionCreators, null, {\n  forwardRef: true\n})(Contact));","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ContactContainer/Contact/Contact.js"],"names":["React","Link","Avatar","toHHMM","withRouterInnerRef","connect","selectConversation","Socket","Contact","Component","constructor","props","onMessageReceive","message","_id","conversation","conversation_id","send_user","content","send_time","console","log","setState","newMessage","lastMessage","update","handleSelectConversation","name","is_group","lastMessageTime","seenMembers","state","updateSeenStatus","userNameForID","parnerID","partnerName","componentDidMount","user","user_id","includes","on","componentWillUnmount","componentDidUpdate","prevProps","roomMatch","id","isGroupChat","type","roomIdOrUsername","usernameMatch","idMatch","render","partner","className","Date","mapStateToProps","authentication","actionCreators","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Avatar from './../../Avatar/Avatar';\nimport { toHHMM } from \"../../../_utils/time\";\nimport { withRouterInnerRef } from '../../../hocs/withRouter';\nimport { connect } from 'react-redux';\nimport { selectConversation } from '../../../_actions/chat.actions'\n\nimport Socket from './../../../Socket';\n\nimport './Contact.css';\n\nclass Contact extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newMessage: false,\n      lastMessage: props.lastMessage\n    }\n  }\n\n  componentDidMount() {\n    const { user, seenMembers } = this.props;\n    const user_id = user.user_id;\n    this.setState({ newMessage: !seenMembers.includes(user_id) });\n    Socket.on('ROOM.SERVER.SEND_MESSAGE', this.onMessageReceive);\n  }\n\n  componentWillUnmount() {\n\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.roomMatch(this.props) && !this.roomMatch(prevProps)) {\n      this.setState({ newMessage: false });\n    }\n  }\n\n  onMessageReceive = (message) => {\n    const { _id, conversation } = this.props;\n    const { conversation_id, send_user, content, send_time } = message;\n    if (_id !== conversation_id) return;\n    if (conversation && _id !== conversation._id) {\n      console.log('onMessageReceive');\n      this.setState({ newMessage: true });\n    }\n    this.setState({ lastMessage: { send_user: send_user, content: content, send_time: send_time } })\n  }\n\n  roomMatch(props) {\n    const { id } = props;\n    const { type: isGroupChat } = props;\n    const { roomIdOrUsername } = 'nvtien';\n    const usernameMatch = !isGroupChat && 'nvtien' === roomIdOrUsername;\n    const idMatch = isGroupChat && id === roomIdOrUsername;\n    return usernameMatch || idMatch;\n  }\n\n  // Update last message\n  update = (message) => {\n    this.setState({ lastMessage: message });\n  }\n\n  handleSelectConversation = () => {\n    const { _id, name, is_group, lastMessageTime, seenMembers, lastMessage } = this.props;\n    if (this.state.newMessage) {\n      this.setState({ newMessage: false });\n      this.props.updateSeenStatus(_id);\n    }\n    this.props.selectConversation({ _id, name, is_group, lastMessageTime, seenMembers, lastMessage })\n  }\n\n  userNameForID = (parnerID) => {\n    let partnerName = ''\n    // this.props.users.map(user => {\n    //   if (user._id === parnerID) {\n    //     partnerName = user.lastname.concat(':');\n    //     return '';\n    //   }\n    //   return '';\n    // })\n    // console.log('partnerName', partnerName);\n    return partnerName;\n  }\n\n  render() {\n    const { newMessage, lastMessage } = this.state;\n    const { user, name, _id, is_group, partner } = this.props;\n    // const partnerName = this.userNameForID(lastMessage.send_user);\n\n    let className = 'ContactItemContainer__ContactItem';\n    if (newMessage) className = className + ' ContactItemContainer__ContactItem--NewMessage';\n\n\n    return (\n      <Link to={`/${_id}`} onClick={this.handleSelectConversation}>\n        <div className={className}>\n          <div>\n            <Avatar userID={is_group ? null : partner} />\n          </div>\n          <div className=\"ContactItemContainer__ContactItem__Content\">\n            <div className=\"Fullname\">{name}</div>\n            {lastMessage &&\n              <div className=\"ContactItemContainer__ContactItem__Content__LastMessage\">\n                {user.user_id === lastMessage.send_user && \"You:\"}&nbsp;{lastMessage.content}\n              </div>\n            }\n          </div>\n          {lastMessage &&\n            <div className=\"ContactItemContainer__ContactItem__Time\">\n              {toHHMM(new Date(lastMessage.send_time))}\n            </div>\n          }\n        </ div>\n      </Link>\n    );\n  }\n}\n\n\nfunction mapStateToProps(state) {\n  const { user } = state.authentication;\n  const { conversation } = state.conversation;\n  return { user, conversation };\n}\n\nconst actionCreators = {\n  selectConversation: selectConversation\n}\n\nexport default withRouterInnerRef(connect(mapStateToProps, actionCreators, null, { forwardRef: true })(Contact));"]},"metadata":{},"sourceType":"module"}