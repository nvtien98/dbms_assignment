{"ast":null,"code":"var _jsxFileName = \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/OnlineStatus/OnlineStatus.js\";\nimport React, { Component, Fragment } from 'react';\nimport { Icon } from 'semantic-ui-react';\nimport { getTimeDiffFromNow } from '../../_utils/time';\n\nclass OnlineStatus extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setUserOffline = message => {\n      const actorID = message.actorID;\n      const partnerID = this.props.partnerID;\n\n      if (partnerID === actorID) {\n        this.setState({\n          lastLogout: new Date()\n        });\n      }\n    };\n\n    this.setUserOnline = message => {\n      const actorID = message.actorID;\n      const partnerID = this.props.partnerID;\n\n      if (partnerID === actorID) {\n        this.setState({\n          lastLogin: new Date()\n        });\n      }\n    };\n\n    this.setDisplayTime = () => {\n      const _this$state = this.state,\n            lastLogin = _this$state.lastLogin,\n            lastLogout = _this$state.lastLogout;\n      this.setState({\n        displayText: this.getDisplayText(lastLogin, lastLogout)\n      });\n    };\n\n    this.componentWillUnmount = () => {\n      clearInterval(this.interval);\n    };\n\n    this.state = {\n      lastLogin: props.lastLogin,\n      lastLogout: props.lastLogout,\n      displayText: this.getDisplayText(props.lastLogin, props.lastLogout)\n    };\n  }\n\n  componentDidMount() {\n    this.setDisplayTime();\n    this.interval = setInterval(this.setDisplayTime, 5000);\n  }\n\n  componentWillUnmount() {}\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.lastLogin !== nextProps.lastLogin) {\n      this.setState({\n        lastLogin: nextProps.lastLogin\n      });\n    }\n\n    if (this.props.lastLogout !== nextProps.lastLogout) {\n      this.setState({\n        lastLogout: nextProps.lastLogout\n      });\n    }\n  }\n\n  componentDidUpdate(_, prevState) {\n    if (this.state.lastLogin !== prevState.lastLogin || this.state.lastLogout !== prevState.lastLogout) {\n      clearInterval(this.interval);\n      this.setDisplayTime();\n      this.interval = setInterval(this.setDisplayTime, 5000);\n    }\n  }\n\n  getDisplayText(lastLogin, lastLogout) {\n    if (lastLogout == null || new Date(lastLogin) > new Date(lastLogout)) {\n      return \"Online\";\n    }\n\n    return getTimeDiffFromNow(lastLogout).toString();\n  }\n\n  render() {\n    const displayText = this.state.displayText;\n    return React.createElement(Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"circle\",\n      size: \"mini\",\n      color: displayText === \"Online\" ? \"green\" : \"grey\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, displayText));\n  }\n\n}\n\nexport default OnlineStatus;","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/OnlineStatus/OnlineStatus.js"],"names":["React","Component","Fragment","Icon","getTimeDiffFromNow","OnlineStatus","constructor","props","setUserOffline","message","actorID","partnerID","setState","lastLogout","Date","setUserOnline","lastLogin","setDisplayTime","state","displayText","getDisplayText","componentWillUnmount","clearInterval","interval","componentDidMount","setInterval","componentWillReceiveProps","nextProps","componentDidUpdate","_","prevState","toString","render"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport { Icon } from 'semantic-ui-react';\n\nimport { getTimeDiffFromNow } from '../../_utils/time';\n\nclass OnlineStatus extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tlastLogin: props.lastLogin,\n\t\t\tlastLogout: props.lastLogout,\n\t\t\tdisplayText: this.getDisplayText(props.lastLogin, props.lastLogout)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setDisplayTime();\n\t\tthis.interval = setInterval(this.setDisplayTime, 5000);\n\t}\n\n\tcomponentWillUnmount() {\n\t}\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif (this.props.lastLogin !== nextProps.lastLogin) {\n\t\t\tthis.setState({ lastLogin: nextProps.lastLogin });\n\t\t}\n\n\t\tif (this.props.lastLogout !== nextProps.lastLogout) {\n\t\t\tthis.setState({ lastLogout: nextProps.lastLogout });\n\t\t}\n\t}\n\n\tsetUserOffline = (message) => {\n\t\tconst { actorID } = message;\n\t\tconst { partnerID } = this.props;\n\n\t\tif (partnerID === actorID) {\n\t\t\tthis.setState({ lastLogout: new Date() })\n\t\t}\n\t}\n\n\tsetUserOnline = (message) => {\n\t\tconst { actorID } = message;\n\t\tconst { partnerID } = this.props;\n\n\t\tif (partnerID === actorID) {\n\t\t\tthis.setState({ lastLogin: new Date() })\n\t\t}\n\t}\n\n\tcomponentDidUpdate(_, prevState) {\n\t\tif (this.state.lastLogin !== prevState.lastLogin || this.state.lastLogout !== prevState.lastLogout) {\n\t\t\tclearInterval(this.interval);\n\t\t\tthis.setDisplayTime();\n\t\t\tthis.interval = setInterval(this.setDisplayTime, 5000);\n\t\t}\n\t}\n\n\tsetDisplayTime = () => {\n\t\tconst { lastLogin, lastLogout } = this.state;\n\t\tthis.setState({ displayText: this.getDisplayText(lastLogin, lastLogout) });\n\t}\n\n\tcomponentWillUnmount = () => {\n\t\tclearInterval(this.interval);\n\t}\n\n\tgetDisplayText(lastLogin, lastLogout) {\n\t\tif (lastLogout == null || new Date(lastLogin) > new Date(lastLogout)) {\n\t\t\treturn \"Online\";\n\t\t}\n\n\t\treturn getTimeDiffFromNow(lastLogout).toString();\n\t}\n\n\trender() {\n\t\tconst { displayText } = this.state;\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t<Icon name=\"circle\" size=\"mini\" color={displayText === \"Online\" ? \"green\" : \"grey\"} />\n\t\t\t\t<span>{displayText}</span>\n\t\t\t</Fragment>\n\t\t);\n\t}\n}\n\nexport default OnlineStatus;"]},"metadata":{},"sourceType":"module"}