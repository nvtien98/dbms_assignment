{"ast":null,"code":"var _jsxFileName = \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/_utils/dom.js\";\nimport React from 'react';\nimport MessageGroup from './../components/ConversationContainer/ChatboxContainer/MessageGroup/MessageGroup';\nimport TimeDivider from './../components/ConversationContainer/ChatboxContainer/TimeDevider/TimeDivider';\nconst MESSAGE_TIME_DISTANCE = 5000;\nexport function renderMessages(messages, currentUserID) {\n  let container = [];\n\n  if (messages.length < 1) {\n    return container;\n  }\n\n  let blockMessages = [];\n  blockMessages.push(messages[0]);\n  container.push(React.createElement(TimeDivider, {\n    key: \"time_divider_\" + 0,\n    time: messages[0].send_time,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }));\n\n  for (let i = 1; i < messages.length; i++) {\n    const messageITime = new Date(messages[i].send_time).getTime();\n    const messageBeforeITime = new Date(messages[i - 1].send_time).getTime();\n    const shouldDivide = messageITime - messageBeforeITime >= MESSAGE_TIME_DISTANCE;\n\n    if (messages[i].send_user !== messages[i - 1].send_user) {\n      container.push(React.createElement(MessageGroup, {\n        key: \"message_group_\" + blockMessages[0].send_time,\n        messages: blockMessages,\n        right: currentUserID === blockMessages[0].send_user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }));\n      if (shouldDivide) container.push(React.createElement(TimeDivider, {\n        key: \"time_divider_\" + i,\n        time: messages[i].send_time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }));\n      blockMessages = [];\n    } else if (shouldDivide) {\n      container.push(React.createElement(MessageGroup, {\n        key: \"message_group_\" + blockMessages[0].send_time,\n        messages: blockMessages,\n        right: currentUserID === blockMessages[0].send_user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }));\n      container.push(React.createElement(TimeDivider, {\n        key: \"time_divider_\" + i,\n        time: messages[i].send_time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }));\n      blockMessages = [];\n    }\n\n    blockMessages.push(messages[i]);\n  }\n\n  container.push(React.createElement(MessageGroup, {\n    key: \"message_group_\" + blockMessages[0].send_time,\n    messages: blockMessages,\n    right: currentUserID === blockMessages[0].send_user,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n  return container;\n}","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/_utils/dom.js"],"names":["React","MessageGroup","TimeDivider","MESSAGE_TIME_DISTANCE","renderMessages","messages","currentUserID","container","length","blockMessages","push","send_time","i","messageITime","Date","getTime","messageBeforeITime","shouldDivide","send_user"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport MessageGroup from './../components/ConversationContainer/ChatboxContainer/MessageGroup/MessageGroup';\nimport TimeDivider from './../components/ConversationContainer/ChatboxContainer/TimeDevider/TimeDivider';\n\nconst MESSAGE_TIME_DISTANCE = 5000;\n\nexport function renderMessages(messages, currentUserID) {\n\n\tlet container = [];\n\tif (messages.length < 1) {\n\t\treturn container;\n\t}\n\n\tlet blockMessages = [];\n\tblockMessages.push(messages[0]);\n\tcontainer.push(<TimeDivider key={\"time_divider_\" + 0} time={messages[0].send_time} />);\n\n\tfor (let i = 1; i < messages.length; i++) {\n\t\tconst messageITime = new Date(messages[i].send_time).getTime();\n\t\tconst messageBeforeITime = new Date(messages[i - 1].send_time).getTime()\n\t\tconst shouldDivide = messageITime - messageBeforeITime >= MESSAGE_TIME_DISTANCE;\n\n\t\tif (messages[i].send_user !== messages[i - 1].send_user) {\n\t\t\tcontainer.push(<MessageGroup\n\t\t\t\tkey={\"message_group_\" + blockMessages[0].send_time}\n\t\t\t\tmessages={blockMessages}\n\t\t\t\tright={currentUserID === blockMessages[0].send_user}\n\t\t\t/>);\n\t\t\tif (shouldDivide) container.push(<TimeDivider key={\"time_divider_\" + i} time={messages[i].send_time} />);\n\t\t\tblockMessages = [];\n\t\t} else if (shouldDivide) {\n\t\t\tcontainer.push(<MessageGroup\n\t\t\t\tkey={\"message_group_\" + blockMessages[0].send_time}\n\t\t\t\tmessages={blockMessages}\n\t\t\t\tright={currentUserID === blockMessages[0].send_user}\n\t\t\t/>);\n\t\t\tcontainer.push(<TimeDivider key={\"time_divider_\" + i} time={messages[i].send_time} />);\n\t\t\tblockMessages = [];\n\t\t}\n\t\tblockMessages.push(messages[i]);\n\t}\n\n\tcontainer.push(<MessageGroup\n\t\tkey={\"message_group_\" + blockMessages[0].send_time}\n\t\tmessages={blockMessages}\n\t\tright={currentUserID === blockMessages[0].send_user}\n\t/>);\n\treturn container;\n}"]},"metadata":{},"sourceType":"module"}