{"ast":null,"code":"var _jsxFileName = \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ConversationContainer/ChatboxContainer/ChatboxContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { renderMessages } from '../../../_utils/dom';\nimport ContainerContext from './ContainerContext.js';\nimport Loading from './../../Loading/Loading';\nimport { Message } from './../../../_models/message';\nimport MessageTyping from './MessageTyping/MessageTyping';\nimport Socket from './../../../Socket';\nimport \"./ChatboxContainer.css\";\n\nclass ChatboxContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.shouldScrollTop = false;\n    this.shouldScrollBottom = true;\n    this.typingEmitted = false;\n\n    this.onMessageReceive = message => {\n      const roomID = this.state.roomID;\n      const conversation_id = message.conversation_id,\n            send_user = message.send_user,\n            content = message.content;\n      if (roomID !== conversation_id) return;\n      const receiveMessage = new Message(send_user, content);\n      this.setState(preState => ({\n        messages: [...preState.messages, receiveMessage]\n      }));\n      this.shouldScrollBottom = true;\n    };\n\n    this.onSomeoneTyping = () => {\n      if (this.chatboxContainer) {\n        const _this$chatboxContaine = this.chatboxContainer,\n              scrollTop = _this$chatboxContaine.scrollTop,\n              scrollHeight = _this$chatboxContaine.scrollHeight,\n              offsetHeight = _this$chatboxContaine.offsetHeight;\n\n        if (scrollTop + offsetHeight >= scrollHeight - 200) {\n          setTimeout(this.scrollToBottom, 0);\n        }\n      }\n    };\n\n    this.scrollToTop = () => {\n      this.chatboxContainer.scrollTop = 10;\n      this.shouldScrollTop = false;\n    };\n\n    this.scrollToBottom = () => {\n      this.chatboxContainer.scrollTop = this.chatboxContainer.scrollHeight;\n    };\n\n    this.onMessageInputChange = event => {\n      event.preventDefault();\n      const roomID = this.state.roomID;\n      const roomMembers = this.props.roomMembers;\n      const content = event.target.value;\n\n      if (content === '') {\n        Socket.emit(\"ROOM.CLIENT.STOP_TYPING\", {\n          conversation_id: roomID,\n          roomMembers: roomMembers\n        });\n        this.typingEmitted = false;\n        return;\n      }\n\n      if (!this.typingEmitted) {\n        Socket.emit(\"ROOM.CLIENT.TYPING\", {\n          conversation_id: roomID,\n          roomMembers: roomMembers\n        });\n        this.typingEmitted = true;\n      }\n    };\n\n    this.onFormSubmit = event => {\n      event.preventDefault();\n      const messageContent = this.messageInput.value.trim();\n\n      if (messageContent === \"\") {\n        return;\n      }\n\n      const roomID = this.state.roomID;\n      const _this$props = this.props,\n            user = _this$props.user,\n            updateLastMessage = _this$props.updateLastMessage,\n            roomMembers = _this$props.roomMembers;\n      const newMessage = new Message(user.user_id, messageContent, true);\n      this.messageInput.value = \"\";\n      Socket.emit(\"ROOM.CLIENT.STOP_TYPING\", {\n        conversation_id: roomID,\n        roomMembers: roomMembers\n      });\n      this.typingEmitted = false;\n      this.setState(prevState => ({\n        messages: [...prevState.messages, newMessage]\n      }));\n      updateLastMessage(roomID, newMessage);\n    };\n\n    this.state = {\n      isLoading: false,\n      messageContent: '',\n      messages: props.messages || [],\n      roomID: props.roomID\n    };\n    this.chatboxContainer = React.createRef();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.messages !== nextProps.messages) {\n      this.setState({\n        messages: nextProps.messages,\n        roomID: nextProps.roomID\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      chatboxContainer: this.chatboxContainer\n    });\n    this.scrollToBottom();\n    this.messageInput.focus();\n    Socket.on('ROOM.SERVER.SEND_MESSAGE', this.onMessageReceive);\n    Socket.on(\"ROOM.SERVER.TYPING\", () => {\n      this.onSomeoneTyping();\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.roomID !== prevProps.roomID) {\n      this.scrollToBottom();\n      this.messageInput.focus();\n    }\n\n    if (this.props.roomID === prevProps.roomID && this.state.messages.length > prevState.messages.length) {\n      if (this.shouldScrollTop) {\n        setTimeout(this.scrollToTop, 0);\n      }\n\n      if (this.shouldScrollBottom) {\n        this.scrollToBottom();\n      }\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          user = _this$props2.user,\n          roomMembers = _this$props2.roomMembers;\n    const _this$state = this.state,\n          messages = _this$state.messages,\n          isLoading = _this$state.isLoading,\n          roomID = _this$state.roomID;\n    return React.createElement(ContainerContext.Provider, {\n      value: {\n        roomID,\n        user,\n        roomMembers\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ChatboxContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ChatboxContainer__ChatboxContainer\",\n      ref: el => this.chatboxContainer = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, isLoading && React.createElement(\"div\", {\n      className: \"ChatboxContainer__ChatboxContainer__Loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: {\n        padding: \"0.5em\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, renderMessages(messages || [], user.user_id), React.createElement(MessageTyping, {\n      roomID: roomID,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))), React.createElement(\"form\", {\n      className: \"ChatboxContainer__InputContainer\",\n      onSubmit: this.onFormSubmit,\n      style: {\n        visibility: roomID ? 'visible' : 'hidden'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"ChatboxContainer__InputContainer__Input\",\n      placeholder: \"Type message...\",\n      ref: el => this.messageInput = el,\n      onChange: this.onMessageInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"ChatboxContainer__InputContainer__SendBtn\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"send\")))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const user = state.authentication.user;\n  return {\n    user\n  };\n}\n\nexport default connect(mapStateToProps)(ChatboxContainer);","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ConversationContainer/ChatboxContainer/ChatboxContainer.js"],"names":["React","Component","connect","renderMessages","ContainerContext","Loading","Message","MessageTyping","Socket","ChatboxContainer","constructor","props","shouldScrollTop","shouldScrollBottom","typingEmitted","onMessageReceive","message","roomID","state","conversation_id","send_user","content","receiveMessage","setState","preState","messages","onSomeoneTyping","chatboxContainer","scrollTop","scrollHeight","offsetHeight","setTimeout","scrollToBottom","scrollToTop","onMessageInputChange","event","preventDefault","roomMembers","target","value","emit","onFormSubmit","messageContent","messageInput","trim","user","updateLastMessage","newMessage","user_id","prevState","isLoading","createRef","componentWillReceiveProps","nextProps","componentDidMount","focus","on","componentDidUpdate","prevProps","length","render","el","padding","visibility","mapStateToProps","authentication"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { renderMessages } from '../../../_utils/dom';\nimport ContainerContext from './ContainerContext.js';\nimport Loading from './../../Loading/Loading';\nimport { Message } from './../../../_models/message';\nimport MessageTyping from './MessageTyping/MessageTyping';\n\nimport Socket from './../../../Socket';\n\nimport \"./ChatboxContainer.css\";\n\nclass ChatboxContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisLoading: false,\n\t\t\tmessageContent: '',\n\t\t\tmessages: props.messages || [],\n\t\t\troomID: props.roomID,\n\t\t}\n\t\tthis.chatboxContainer = React.createRef();\n\t}\n\n\tshouldScrollTop = false;\n\tshouldScrollBottom = true;\n\ttypingEmitted = false;\n\n\tcomponentWillReceiveProps(nextProps) {\n\t\tif (this.props.messages !== nextProps.messages) {\n\t\t\tthis.setState({\n\t\t\t\tmessages: nextProps.messages,\n\t\t\t\troomID: nextProps.roomID\n\t\t\t});\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\tchatboxContainer: this.chatboxContainer,\n\t\t})\n\t\tthis.scrollToBottom();\n\t\tthis.messageInput.focus();\n\n\t\tSocket.on('ROOM.SERVER.SEND_MESSAGE', this.onMessageReceive);\n\t\tSocket.on(\"ROOM.SERVER.TYPING\", () => { this.onSomeoneTyping() });\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tif (this.props.roomID !== prevProps.roomID) {\n\t\t\tthis.scrollToBottom();\n\t\t\tthis.messageInput.focus();\n\t\t}\n\n\t\tif (this.props.roomID === prevProps.roomID && this.state.messages.length > prevState.messages.length) {\n\n\t\t\tif (this.shouldScrollTop) {\n\t\t\t\tsetTimeout(this.scrollToTop, 0);\n\t\t\t}\n\n\t\t\tif (this.shouldScrollBottom) {\n\t\t\t\tthis.scrollToBottom();\n\t\t\t}\n\t\t}\n\t}\n\n\tonMessageReceive = (message) => {\n\t\tconst { roomID } = this.state;\n\t\tconst { conversation_id, send_user, content } = message;\n\n\t\tif (roomID !== conversation_id) return;\n\t\tconst receiveMessage = new Message(send_user, content);\n\t\tthis.setState((preState) => ({ messages: [...preState.messages, receiveMessage] }))\n\t\tthis.shouldScrollBottom = true;\n\t}\n\n\tonSomeoneTyping = () => {\n\t\tif (this.chatboxContainer) {\n\t\t\tconst { scrollTop, scrollHeight, offsetHeight } = this.chatboxContainer;\n\n\t\t\tif (scrollTop + offsetHeight >= scrollHeight - 200) {\n\t\t\t\tsetTimeout(this.scrollToBottom, 0);\n\t\t\t}\n\t\t}\n\t}\n\n\tscrollToTop = () => {\n\t\tthis.chatboxContainer.scrollTop = 10;\n\t\tthis.shouldScrollTop = false;\n\t}\n\n\tscrollToBottom = () => {\n\t\tthis.chatboxContainer.scrollTop = this.chatboxContainer.scrollHeight;\n\t}\n\n\tonMessageInputChange = (event) => {\n\t\tevent.preventDefault();\n\t\tconst { roomID } = this.state;\n\t\tconst { roomMembers } = this.props;\n\t\tconst { value: content } = event.target;\n\t\tif (content === '') {\n\t\t\tSocket.emit(\"ROOM.CLIENT.STOP_TYPING\", { conversation_id: roomID, roomMembers: roomMembers });\n\t\t\tthis.typingEmitted = false;\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.typingEmitted) {\n\t\t\tSocket.emit(\"ROOM.CLIENT.TYPING\", { conversation_id: roomID, roomMembers: roomMembers });\n\t\t\tthis.typingEmitted = true;\n\t\t}\n\t}\n\n\tonFormSubmit = (event) => {\n\t\tevent.preventDefault();\n\n\t\tconst messageContent = this.messageInput.value.trim();\n\t\tif (messageContent === \"\") {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { roomID } = this.state;\n\t\tconst { user, updateLastMessage, roomMembers } = this.props;\n\t\tconst newMessage = new Message(user.user_id, messageContent, true);\n\t\tthis.messageInput.value = \"\";\n\n\t\tSocket.emit(\"ROOM.CLIENT.STOP_TYPING\", { conversation_id: roomID, roomMembers: roomMembers });\n\t\tthis.typingEmitted = false;\n\n\t\tthis.setState((prevState) => ({ messages: [...prevState.messages, newMessage] }));\n\t\tupdateLastMessage(roomID, newMessage);\n\t}\n\n\trender() {\n\t\tconst { user, roomMembers } = this.props;\n\t\tconst { messages, isLoading, roomID } = this.state;\n\t\treturn (\n\t\t\t<ContainerContext.Provider value={{ roomID, user, roomMembers }}>\n\t\t\t\t<div className=\"ChatboxContainer\">\n\t\t\t\t\t<div className=\"ChatboxContainer__ChatboxContainer\" ref={el => this.chatboxContainer = el}>\n\t\t\t\t\t\t{isLoading && <div className=\"ChatboxContainer__ChatboxContainer__Loader\"><Loading /></div>}\n\t\t\t\t\t\t<div style={{ padding: \"0.5em\" }}>\n\t\t\t\t\t\t\t{renderMessages(messages || [], user.user_id)}\n\t\t\t\t\t\t\t<MessageTyping roomID={roomID} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<form className=\"ChatboxContainer__InputContainer\" onSubmit={this.onFormSubmit} style={{ visibility: roomID ? 'visible' : 'hidden' }}>\n\t\t\t\t\t\t<input className=\"ChatboxContainer__InputContainer__Input\" placeholder=\"Type message...\" ref={el => this.messageInput = el} onChange={this.onMessageInputChange} />\n\t\t\t\t\t\t<div className=\"ChatboxContainer__InputContainer__SendBtn\">\n\t\t\t\t\t\t\t<button>send</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</ContainerContext.Provider>\n\t\t)\n\t}\n}\n\nfunction mapStateToProps(state) {\n\tconst { user } = state.authentication;\n\treturn { user };\n}\n\nexport default connect(mapStateToProps)(ChatboxContainer);"]},"metadata":{},"sourceType":"module"}