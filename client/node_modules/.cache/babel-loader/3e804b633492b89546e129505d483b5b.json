{"ast":null,"code":"import { userService } from '../_services/user.service';\nimport { userConstant } from '../_constants/user.constant';\nimport { alertActions } from './alert.actions';\nimport { history } from './../_utils/history';\nimport Socket from './../Socket';\nexport const userActions = {\n  login,\n  logout,\n  register\n};\n\nfunction login(email, passowrd) {\n  return dispatch => {\n    dispatch(request({\n      email\n    }));\n    userService.login(email, passowrd).then(user => {\n      Socket.open({\n        userID: user.user_id\n      });\n      dispatch(success(user));\n      history.push('/');\n    }).catch(err => {\n      const errMessage = 'Username or password is incorrect';\n      dispatch(failure(errMessage));\n      dispatch(alertActions.error(errMessage));\n      console.log(err);\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstant.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstant.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstant.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  return async dispatch => {\n    try {\n      await userService.logout();\n      localStorage.removeItem('user');\n      history.push('/login');\n      dispatch({\n        type: userConstant.LOGOUT\n      });\n      Socket.close();\n    } catch (err) {\n      console.log(\"Cannot logout user\", err);\n    }\n  };\n}\n\nfunction register(user) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(user).then(() => {\n      dispatch(success(user));\n      history.push('/login');\n      dispatch(alertActions.success('Registration successful'));\n    }).catch(() => {\n      const errMessage = 'Email \"' + user.email + '\" is already taken';\n      dispatch(failure(errMessage));\n      dispatch(alertActions.error(errMessage));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstant.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  ;\n\n  function success(user) {\n    return {\n      type: userConstant.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  ;\n\n  function failure(error) {\n    return {\n      type: userConstant.REGISTER_FAILURE,\n      error\n    };\n  }\n\n  ;\n}","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/_actions/user.actions.js"],"names":["userService","userConstant","alertActions","history","Socket","userActions","login","logout","register","email","passowrd","dispatch","request","then","user","open","userID","user_id","success","push","catch","err","errMessage","failure","error","console","log","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","localStorage","removeItem","LOGOUT","close","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE"],"mappings":"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","sourcesContent":["import { userService } from '../_services/user.service';\nimport { userConstant } from '../_constants/user.constant';\nimport { alertActions } from './alert.actions';\nimport { history } from './../_utils/history';\n\nimport Socket from './../Socket';\n\nexport const userActions = {\n\tlogin,\n\tlogout,\n\tregister,\n}\n\nfunction login(email, passowrd) {\n\treturn dispatch => {\n\t\tdispatch(request({ email }));\n\t\tuserService.login(email, passowrd)\n\t\t\t.then(user => {\n\t\t\t\tSocket.open({ userID: user.user_id });\n\t\t\t\tdispatch(success(user));\n\t\t\t\thistory.push('/');\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconst errMessage = 'Username or password is incorrect';\n\t\t\t\tdispatch(failure(errMessage));\n\t\t\t\tdispatch(alertActions.error(errMessage));\n\t\t\t\tconsole.log(err);\n\t\t\t});\n\t}\n\n\tfunction request(user) {\n\t\treturn { type: userConstant.LOGIN_REQUEST, user };\n\t}\n\n\tfunction success(user) {\n\t\treturn { type: userConstant.LOGIN_SUCCESS, user };\n\t}\n\n\tfunction failure(error) {\n\t\treturn { type: userConstant.LOGIN_FAILURE, error };\n\t}\n}\n\nfunction logout() {\n\treturn async dispatch => {\n\t\ttry {\n\t\t\tawait userService.logout();\n\t\t\tlocalStorage.removeItem('user');\n\t\t\thistory.push('/login');\n\t\t\tdispatch({ type: userConstant.LOGOUT });\n\t\t\tSocket.close();\n\t\t}\n\t\tcatch (err) {\n\t\t\tconsole.log(\"Cannot logout user\", err);\n\t\t}\n\t}\n}\n\nfunction register(user) {\n\treturn dispatch => {\n\t\tdispatch(request(user));\n\t\tuserService.register(user)\n\t\t\t.then(() => {\n\t\t\t\tdispatch(success(user));\n\t\t\t\thistory.push('/login');\n\t\t\t\tdispatch(alertActions.success('Registration successful'))\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tconst errMessage = 'Email \"' + user.email + '\" is already taken';\n\t\t\t\tdispatch(failure(errMessage));\n\t\t\t\tdispatch(alertActions.error(errMessage));\n\t\t\t});\n\t}\n\n\tfunction request(user) {\n\t\treturn { type: userConstant.REGISTER_REQUEST, user };\n\t};\n\n\tfunction success(user) {\n\t\treturn { type: userConstant.REGISTER_SUCCESS, user };\n\t};\n\n\tfunction failure(error) {\n\t\treturn { type: userConstant.REGISTER_FAILURE, error };\n\t};\n}"]},"metadata":{},"sourceType":"module"}