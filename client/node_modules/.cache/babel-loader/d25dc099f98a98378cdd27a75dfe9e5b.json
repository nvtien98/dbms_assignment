{"ast":null,"code":"var _jsxFileName = \"/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ContactContainer/ContactContainer.js\";\nimport React from 'react';\nimport ContactSearch from './Search/ContactSearch';\nimport { Icon, Popup, Modal, Button, TransitionablePortal } from 'semantic-ui-react';\nimport Contact from './Contact/Contact';\nimport CreateGroup from './CreateGroup/CreateGroup';\nimport { getRecentConversations, getUsers } from \"../../_services/api.service\";\nimport ContactContainerPlaceHolder from './Placeholder';\nimport { connect } from 'react-redux';\nimport { history } from './../../_utils/history';\nimport { updateSeenStatus } from './../../_services/api.service';\nimport audioNotify from './../../images/pip.mp3';\nimport Socket from './../../Socket';\nimport \"./ContactContainer.css\";\nexport const DEFAULT_PROPS = {\n  transition: {\n    animation: \"fade down\",\n    duration: 700\n  }\n};\n\nclass ContactContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.contactRefs = {};\n\n    this.updateContact = (roomID, message) => {\n      if (this.contactRefs[roomID]) {\n        this.contactRefs[roomID].update(message);\n        this.hoistContact(roomID, null);\n      } else {\n        const _this$props = this.props,\n              conversation = _this$props.conversation,\n              user = _this$props.user;\n        const newConversation = {\n          _id: roomID,\n          name: conversation.name,\n          is_group: conversation.is_group,\n          partner: conversation.user_id,\n          lastMessageTime: new Date().getTime(),\n          seenMembers: [user.user_id],\n          lastMessage: message\n        };\n        this.addNewConversation(newConversation);\n      }\n    };\n\n    this.play = () => {\n      this.audio.play();\n    };\n\n    this.onMessageReceive = message => {\n      this.play();\n      const conversation_id = message.conversation_id;\n      this.hoistContact(conversation_id, message);\n    };\n\n    this.hoistContact = (roomID, message) => {\n      this.setState(prevState => {\n        let candidateRoom;\n        const restRooms = prevState.conversations.filter(room => {\n          const match = room._id === roomID;\n          if (match) candidateRoom = room;\n          return !match;\n        });\n\n        if (!candidateRoom) {\n          candidateRoom = {\n            _id: message.conversation_id,\n            name: message.name,\n            is_group: false,\n            partner: [message.send_user],\n            lastMessageTime: message.send_time,\n            seenMembers: [],\n            lastMessage: {\n              send_user: message.send_user,\n              content: message.content,\n              send_time: message.send_time\n            }\n          };\n        }\n\n        return {\n          conversations: [candidateRoom, ...restRooms]\n        };\n      });\n    };\n\n    this.updateSeenStatus = roomID => {\n      const user_id = this.props.user.user_id;\n      this.setState(prevState => {\n        const tempConversation = prevState.conversations.filter(contact => {\n          const match = contact._id === roomID;\n\n          if (match) {\n            updateSeenStatus(roomID);\n            contact.seenMembers.push(user_id);\n          }\n\n          return contact;\n        });\n        return {\n          conversations: tempConversation\n        };\n      });\n    };\n\n    this.addNewConversation = newConversation => {\n      let tempConversations = this.state.conversations;\n      tempConversations.unshift(newConversation);\n      this.setState({\n        conversations: tempConversations\n      });\n    };\n\n    this.state = {\n      conversations: [],\n      users: [],\n      isLoading: false,\n      open: false\n    };\n    this.audio = new Audio(audioNotify);\n  }\n\n  componentDidMount() {\n    this.fetchContacts();\n    this.fetchUsers();\n    Socket.on(\"ROOM.SERVER.SEND_MESSAGE\", this.onMessageReceive);\n    Socket.on(\"ROOM.SERVER.CREATE_GROUP\", this.addNewConversation);\n  }\n\n  async fetchContacts() {\n    this.setState({\n      isLoading: true\n    });\n\n    try {\n      const res = await getRecentConversations();\n      const conversations = res.data;\n      this.setState({\n        conversations: conversations || []\n      });\n    } catch (e) {\n      console.warn('Error while fetching rooms', e);\n      localStorage.removeItem('user');\n      history.push('/login');\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  async fetchUsers() {\n    this.setState({\n      isLoading: true\n    });\n\n    try {\n      const users = await getUsers();\n      this.setState({\n        users: users || []\n      });\n    } catch (err) {\n      console.warn('Error while fetching users', err);\n    } finally {\n      this.setState({\n        isLoading: false\n      });\n    }\n  }\n\n  onOpenModel() {\n    this.setState({\n      open: true\n    });\n  }\n\n  onCloseModel() {\n    this.setState({\n      open: false\n    });\n  }\n\n  async onCreateGroup() {\n    const data = await this.createGroup.handleSubmit();\n\n    if (data) {\n      this.onCloseModel();\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          conversations = _this$state.conversations,\n          isLoading = _this$state.isLoading,\n          open = _this$state.open,\n          users = _this$state.users;\n    const transition = this.props.transition;\n    if (isLoading) return React.createElement(ContactContainerPlaceHolder, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      className: \"ContactContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ContactContainer__SearchContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(ContactSearch, {\n      users: users,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      onClick: () => {\n        console.log(\"Add friend\");\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      content: \"Add friend\",\n      trigger: React.createElement(Icon, {\n        circular: true,\n        color: \"blue\",\n        size: \"large\",\n        name: \"user plus\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      onClick: () => {\n        this.onOpenModel();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      content: \"Create New Group\",\n      trigger: React.createElement(Icon, {\n        circular: true,\n        color: \"blue\",\n        size: \"large\",\n        name: \"users\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"ContactContainer__ContactItemContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, users.length > 0 && conversations.map(contact => {\n      return React.createElement(Contact, Object.assign({\n        key: contact._id,\n        users: users\n      }, contact, {\n        updateSeenStatus: this.updateSeenStatus,\n        ref: el => this.contactRefs[contact._id] = el,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }));\n    })), React.createElement(TransitionablePortal, Object.assign({\n      open\n    }, {\n      transition\n    }, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      open: open,\n      size: 'small',\n      style: {\n        maxHeight: '585px',\n        margin: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, \"Create Group\"), React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, React.createElement(CreateGroup, {\n      users: users,\n      addNewConversation: this.addNewConversation,\n      ref: el => this.createGroup = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    })), React.createElement(Modal.Actions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"red\",\n      onClick: () => {\n        this.onCloseModel();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"remove\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), \" Cancel\"), React.createElement(Button, {\n      color: \"green\",\n      onClick: () => {\n        this.onCreateGroup();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"checkmark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), \" Create\")))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  const user = state.authentication.user;\n  const conversation = state.conversation.conversation;\n  return {\n    user,\n    conversation\n  };\n}\n\nexport default connect(mapStateToProps, null, null, {\n  forwardRef: true\n})(ContactContainer);","map":{"version":3,"sources":["/home/tiennv/Documents/HK191/DBMS/react_chat_app/client/src/components/ContactContainer/ContactContainer.js"],"names":["React","ContactSearch","Icon","Popup","Modal","Button","TransitionablePortal","Contact","CreateGroup","getRecentConversations","getUsers","ContactContainerPlaceHolder","connect","history","updateSeenStatus","audioNotify","Socket","DEFAULT_PROPS","transition","animation","duration","ContactContainer","Component","constructor","props","contactRefs","updateContact","roomID","message","update","hoistContact","conversation","user","newConversation","_id","name","is_group","partner","user_id","lastMessageTime","Date","getTime","seenMembers","lastMessage","addNewConversation","play","audio","onMessageReceive","conversation_id","setState","prevState","candidateRoom","restRooms","conversations","filter","room","match","send_user","send_time","content","tempConversation","contact","push","tempConversations","state","unshift","users","isLoading","open","Audio","componentDidMount","fetchContacts","fetchUsers","on","res","data","e","console","warn","localStorage","removeItem","err","onOpenModel","onCloseModel","onCreateGroup","createGroup","handleSubmit","render","log","length","map","el","maxHeight","margin","mapStateToProps","authentication","forwardRef"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ContactSearch from './Search/ContactSearch';\nimport { Icon, Popup, Modal, Button, TransitionablePortal } from 'semantic-ui-react'\nimport Contact from './Contact/Contact';\nimport CreateGroup from './CreateGroup/CreateGroup';\nimport { getRecentConversations, getUsers } from \"../../_services/api.service\";\nimport ContactContainerPlaceHolder from './Placeholder';\n\nimport { connect } from 'react-redux';\nimport { history } from './../../_utils/history';\n\nimport { updateSeenStatus } from './../../_services/api.service';\n\nimport audioNotify from './../../images/pip.mp3';\n\nimport Socket from './../../Socket';\n\nimport \"./ContactContainer.css\";\n\nexport const DEFAULT_PROPS = {\n  transition: {\n    animation: \"fade down\",\n    duration: 700\n  }\n};\n\nclass ContactContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conversations: [],\n      users: [],\n      isLoading: false,\n      open: false\n    }\n    this.audio = new Audio(audioNotify);\n  }\n\n\n  contactRefs = {};\n\n  componentDidMount() {\n    this.fetchContacts();\n    this.fetchUsers();\n    Socket.on(\"ROOM.SERVER.SEND_MESSAGE\", this.onMessageReceive);\n    Socket.on(\"ROOM.SERVER.CREATE_GROUP\", this.addNewConversation);\n  }\n\n  updateContact = (roomID, message) => {\n    if (this.contactRefs[roomID]) {\n      this.contactRefs[roomID].update(message);\n      this.hoistContact(roomID, null);\n    }\n    else {\n      const { conversation, user } = this.props;\n      const newConversation = {\n        _id: roomID,\n        name: conversation.name,\n        is_group: conversation.is_group,\n        partner: conversation.user_id,\n        lastMessageTime: new Date().getTime(),\n        seenMembers: [user.user_id],\n        lastMessage: message,\n      }\n      this.addNewConversation(newConversation);\n    }\n  }\n\n  play = () => {\n    this.audio.play();\n  }\n\n  onMessageReceive = (message) => {\n    this.play();\n    const { conversation_id } = message;\n    this.hoistContact(conversation_id, message);\n  }\n\n  hoistContact = (roomID, message) => {\n    this.setState((prevState) => {\n      let candidateRoom;\n      const restRooms = prevState.conversations.filter(room => {\n        const match = room._id === roomID;\n        if (match) candidateRoom = room;\n        return !match;\n      });\n\n      if (!candidateRoom) {\n        candidateRoom = {\n          _id: message.conversation_id,\n          name: message.name,\n          is_group: false,\n          partner: [message.send_user],\n          lastMessageTime: message.send_time,\n          seenMembers: [],\n          lastMessage: {\n            send_user: message.send_user,\n            content: message.content,\n            send_time: message.send_time,\n          }\n        }\n      }\n\n      return { conversations: [candidateRoom, ...restRooms] };\n    });\n  }\n\n  updateSeenStatus = (roomID) => {\n    const { user_id } = this.props.user;\n    this.setState((prevState) => {\n      const tempConversation = prevState.conversations.filter(contact => {\n        const match = contact._id === roomID;\n        if (match) {\n          updateSeenStatus(roomID);\n          contact.seenMembers.push(user_id);\n        }\n        return contact;\n      });\n      return { conversations: tempConversation };\n    });\n  }\n\n  async fetchContacts() {\n    this.setState({ isLoading: true });\n    try {\n      const res = await getRecentConversations();\n      const conversations = res.data;\n      this.setState({ conversations: conversations || [] });\n    } catch (e) {\n      console.warn('Error while fetching rooms', e);\n      localStorage.removeItem('user');\n      history.push('/login');\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  async fetchUsers() {\n    this.setState({ isLoading: true });\n    try {\n      const users = await getUsers();\n      this.setState({ users: users || [] });\n    } catch (err) {\n      console.warn('Error while fetching users', err);\n    } finally {\n      this.setState({ isLoading: false });\n    }\n  }\n\n  onOpenModel() {\n    this.setState({ open: true });\n  }\n\n  onCloseModel() {\n    this.setState({ open: false });\n  }\n\n  async onCreateGroup() {\n    const data = await this.createGroup.handleSubmit();\n    if (data) {\n      this.onCloseModel();\n    }\n  }\n\n  addNewConversation = (newConversation) => {\n    let tempConversations = this.state.conversations;\n    tempConversations.unshift(newConversation)\n    this.setState({ conversations: tempConversations });\n  }\n\n  render() {\n    const { conversations, isLoading, open, users } = this.state;\n    const { transition } = this.props;\n    if (isLoading) return <ContactContainerPlaceHolder />;\n\n    return (\n      <div className=\"ContactContainer\">\n        <div className=\"ContactContainer__SearchContainer\">\n          <ContactSearch users={users} />\n          <div onClick={() => { console.log(\"Add friend\") }} >\n            <Popup content='Add friend'\n              trigger={\n                <Icon circular color=\"blue\" size=\"large\" name='user plus' />\n              }\n            />\n          </div>\n          <div onClick={() => { this.onOpenModel() }} >\n            <Popup content='Create New Group'\n              trigger={<Icon circular color=\"blue\" size=\"large\" name='users' />}\n\n            />\n          </div>\n        </div>\n\n        <div className=\"ContactContainer__ContactItemContainer\">\n          {users.length > 0 && conversations.map(contact => {\n            return <Contact\n              key={contact._id}\n              users={users}\n              {...contact}\n              updateSeenStatus={this.updateSeenStatus}\n              ref={el => this.contactRefs[contact._id] = el}\n            />\n          })}\n        </div>\n\n        <TransitionablePortal {...{ open }} {...{ transition }}>\n          <Modal open={open} size={'small'} style={{ maxHeight: '585px', margin: 'auto' }}>\n\n            <Modal.Header>Create Group</Modal.Header>\n\n            <Modal.Content>\n              <CreateGroup users={users} addNewConversation={this.addNewConversation} ref={el => this.createGroup = el} />\n            </Modal.Content>\n\n            <Modal.Actions>\n              <Button color='red' onClick={() => { this.onCloseModel() }}>\n                <Icon name='remove' /> Cancel\n              </Button>\n              <Button color='green' onClick={() => { this.onCreateGroup() }}>\n                <Icon name='checkmark' /> Create\n              </Button>\n            </Modal.Actions>\n\n          </Modal>\n        </TransitionablePortal>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { user } = state.authentication;\n  const { conversation } = state.conversation;\n  return { user, conversation };\n}\n\n\nexport default connect(mapStateToProps, null, null, { forwardRef: true })(ContactContainer);"]},"metadata":{},"sourceType":"module"}